package main

import (
	"log"
	"monitoring-app/config"
	"monitoring-app/internal/api"
	"monitoring-app/internal/domain"
	"monitoring-app/internal/repository"
	"net/http"
)

func main() {
	cfg, err := config.LoadConfig(".env", "config.yaml")
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:", err)
	}

	db, err := repository.ConnectDB(cfg)
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:", err)
	}
	defer db.Close()

	notifier := domain.NewTelegramNotifier(cfg.TelegramBotToken, cfg.TelegramChatID)

	service := domain.NewWebsiteService(notifier, cfg.Monitoring.Websites, cfg.Monitoring.Interval)

	log.Println("üîÑ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∞–π—Ç–æ–≤...")
	go service.StartMonitoring()

	repo := repository.NewRepository(db)
	apiHandler := &api.APIHandler{
		Service: service,
		Repo:    repo,
	}

	mux := api.SetupRoutes(apiHandler)

	log.Println("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ + API –∑–∞–ø—É—â–µ–Ω—ã –Ω–∞ –ø–æ—Ä—Ç—É", cfg.ServerPort)
	log.Fatal(http.ListenAndServe(":"+cfg.ServerPort, mux))
}
