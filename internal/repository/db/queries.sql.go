// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countResults = `-- name: CountResults :one
SELECT COUNT(*) FROM results
`

func (q *Queries) CountResults(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countResults)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteOldResults = `-- name: DeleteOldResults :exec
DELETE FROM results
WHERE created_at < NOW() - INTERVAL '30 days'
`

func (q *Queries) DeleteOldResults(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteOldResults)
	return err
}

const getLastResults = `-- name: GetLastResults :many
SELECT url, status_code, duration_ms, error, created_at
FROM results
ORDER BY created_at DESC
    LIMIT $1
`

type GetLastResultsRow struct {
	Url        string
	StatusCode int32
	DurationMs int32
	Error      pgtype.Text
	CreatedAt  pgtype.Timestamp
}

func (q *Queries) GetLastResults(ctx context.Context, limit int32) ([]GetLastResultsRow, error) {
	rows, err := q.db.Query(ctx, getLastResults, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLastResultsRow
	for rows.Next() {
		var i GetLastResultsRow
		if err := rows.Scan(
			&i.Url,
			&i.StatusCode,
			&i.DurationMs,
			&i.Error,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getResultByURL = `-- name: GetResultByURL :one
SELECT url, status_code, duration_ms, error, created_at
FROM results
WHERE url = $1
ORDER BY created_at DESC
    LIMIT 1
`

type GetResultByURLRow struct {
	Url        string
	StatusCode int32
	DurationMs int32
	Error      pgtype.Text
	CreatedAt  pgtype.Timestamp
}

func (q *Queries) GetResultByURL(ctx context.Context, url string) (GetResultByURLRow, error) {
	row := q.db.QueryRow(ctx, getResultByURL, url)
	var i GetResultByURLRow
	err := row.Scan(
		&i.Url,
		&i.StatusCode,
		&i.DurationMs,
		&i.Error,
		&i.CreatedAt,
	)
	return i, err
}

const insertResult = `-- name: InsertResult :exec
INSERT INTO results (url, status_code, duration_ms, error)
VALUES ($1, $2, $3, $4)
`

type InsertResultParams struct {
	Url        string
	StatusCode int32
	DurationMs int32
	Error      pgtype.Text
}

func (q *Queries) InsertResult(ctx context.Context, arg InsertResultParams) error {
	_, err := q.db.Exec(ctx, insertResult,
		arg.Url,
		arg.StatusCode,
		arg.DurationMs,
		arg.Error,
	)
	return err
}
